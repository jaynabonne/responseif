2016-07-30

Objects taking part need:
- name/alias
- subjective pronoun ['he', 'she', 'it', 'we', 'they', etc] (can be type-based)
- objective pronoun ['him', 'her', 'it', 'us', 'them', etc] (can be type-based)
- possessive pronoun ['his', 'her', 'its', 'our', 'their'] (can be type-based)

2016-07-28, 2016-07-29

f>
f<
f^

f+
f-
f.

fPs - first person (singular), present, simple
sPs - second person (singular), present, simple
fps - first person (singular), past, simple
sps - second person (singular), past, simple
Ffs - first person (plural), future, simple
Sfs - second person ( plural), future, simple
--------------------------------------------------------

--
Elf: {{verb:attack}} you with a knife
Gnome: {{verb:attack}} you with a knife

The elf and gnome attack you with a knife.

--
Tom: {{verb:walk}}.

Tom walks.

--
Tom: {{verb:walk}}
Mary: {{verb:walk}}

Tom and Mary walk.

--
Jake: {{laugh}}

.story-text laughs .template {^$responder} {laugh}

John: {{run}} away

.story-text runs-away .template {^$responder} {@run} away

Jake laughs, and John runs away.

.response
    .does
        .laughs

.response
    .does
        .runs-away


--
Amy: {{press}} the elevator button
.story-text presses-elevator-button .template {=$responder=} {'press} {elevator-button}

Elevator button: {{light}} up

Amy presses the elevator button, and the elevator button lights up.
Better: Amy presses the elevator button, and it lights up.

How to mark up objects?

Mary hits Billy, and she starts to laugh. -> Mary hits Billy and starts to laugh.
Mary hits Billy, and he starts to cry.

.responder hits .object , and .responder starts to laugh.

{=$responder=} {@hit} {^object}, and {=$responder=}


2016-07-25

.goal run-elevator
    .goal close-door
        .wants !door-open


    .goal seek-floor(n)
        .wants button off for floor (n)


2016-07-24

Multiple parameters to macros.

.define north-exit
    .response NAME
        .does .says .<value>


.add 1 ., 2 ., 3

.north-exit .named Room .originally Kitchen .goes-to kitchen


2016-07-19

To have autonomous traversal of rooms, we need to be able to create a graph of all the rooms with their exits.

Connections between rooms: currently movement is handled via responses. A choice causes a "moves". How do NPCs
know what the exits are? They could simply move through each room (virtually) and gather all the current responses.
However, we need to know what will happen when the response takes place, without actually doing it. (Or do we? Can we
have "seekers" that move through the graph and work out the path?)

Also, some exits (or traversals between nodes) will require a potential change of world state before traversal can
occur. For example, to use the elevator as part of getting from point A to point B, the NPC must wait for the elevator
doors to be open before getting on. This introduces a *goal*. The goal is for the doors to be open, which requires the
NPC to push the elevator button. And wait. Once in the elevator, the NPC must push the desired floor button and then wait
again for the doors to open on that floor. (This might seem complicated, but I did it in What Will Be, for Quest.)

Similarly, to enter the rooms where they are staying, the NPCs must use their card keys to trigger the doors
before entering.

So we need a goal associated with exits along with responses to support the goals.


2016-07-12

    .response ROSE-NORTH
        .prompts Enter building
        .does
            .moves player .to Floor 1 Foyer

.define north-exit
    .response ROSE-NORTH
        .prompts .<value>
        .does .moves player
.enddef

.north-exit Enter building .to Floor 1 Foyer

2016-07-09

From "About Face":
goals implemented by activities -> tasks -> operations

"activities" composed of "tasks"
"tasks" composed of "operations"
"operations"

"goals" are expected or desired end conditions. "activities" and "tasks" are steps towards achieving goals (at
different levels of organization).

Where do responses fit into this?

One possibility: a response's "actions" could correspond to operations. That would put the current list of actions for
a response as the response's "task".

Does it make sense to establish "goals" (desired effects or, conversely, what the effect will be), and then create another
level above the current "response action list", which would be an activity? Then responses could be turned into
holders of activities, which would be higher level than they are at the moment.

Or do we keep responses the same (effectively as tasks) and add another level of organization above them?

2016-07-05

Switch ".as" to ".formatted":

.says This is some text .formatted hint

Or---
Use ".is" value as class name always.

Either way, we can free up ".as" to specify the content type.

.says She jumped back in shock. "What are you doing?" .as dialogue
.says She jumped back in shock. "What are you doing?" .as dialogue-break
.says She jumped back in shock. "What are you doing?" .containing dialogue

Alternative: come up with additional phrases to go along with ".says", to invoke other StoryText functionality.



2016-05-29

Todo (short term):
- Document "uses priority" and "uses best"
- Document ".setup"
- Add "required topic" notation to called topics
- Implement ".setup" (Done 2016-05-29)

---------------------------------------

2016-05-19

.setup player
    .sets happy
    .moves .to room
    .uses all
        .response

    .end
.end

---------------------------------------

2016-05-17

1 + 2 => 1 2 +

2 * 3 => 2 3 *

2 * 3 + 1 => 2 3 * 1 +

1 + 2 * 3 => 1 2 3 * +

1 * (2 + 3) => 1 2 3 + * = 1 [2 3 + ] *

1 * (2 mod (3 + 4)) => 1 2 3 4 + mod *

1 * (2 mod (3 + 4) + 8) => 1 2 3 4 + mod 8 +


---------------------------------------

2016-05-15

Topics often don't seem enough. For example, it's odd to have a topic like "Tom_is_happy" or "butler_killed_mr_wilson".
We're almost getting into the realm of "facts".

Noun: Tom
Verb: is
State: happy
-> happy("Tom") or is_happy("Tom")
-> happy["Tom"] or is_happy["Tom"]
-> happy[Tom] or is_happy[Tom]
-> happy{Tom} or is_happy{Tom}

Noun: butler
Verb: killed
Object: Mr. Wilson
-> killed("butler", "Mr. Wilson")
-> killed["butler", "Mr. Wilson"]
-> killed[butler, Mr. Wilson]

Noun: Jane
Verb: loves
Object: somebody
-> loves("Jane", "somebody")
-> loves(Jane, somebody)
-> loves["Jane", "somebody"]
-> loves "Jane" "somebody"
-> loves[Jane, somebody]

Colonel Mustard in the library with the wrench
-> clue_killed["Colonel Mustard", "library", "wrench"]
-> clue_killed[Colonel Mustard, library, wrench]


.state happy
.relation killed
.relation loves
.relation clue_killed .arity 3

.sets happy is equivalent to .sets happy(<responder>)
.sets happy["Jane"]
.sets happy{Jane}

happy(Tom) { happy: { Tom: 1.0 } }
happy(Jane) { happy: { Jane: 1.0 } }

happy(Tom) then
happy(Jane) { happy: { Tom: 1.0, Jane: 1.0 } }

killed(Tom, John)

kissed(Mary) is equivalent to kissed(<responder>, Mary) [or kissed(Mary, <responder>)?]

"Facts" are stored in each responder. Each responder has own set of facts based on what has been set and on suggestions.

I don't know if it's necessary to have full inference (or any) at this point. Responses handle that mostly, for now.
The main thing is to allow a representation for things beyond just topics.

topic(family)
topic(murder)

---------------------------------------

2016-05-04

        .does .uses best


.actions thingy
    .response
        .does
            .adjusts state .toward target .stepping 0.6
            .says state={=state=}, target={=target=}
    .response
        .does .uses best
            .response
                .weights state
                .needs target
                .does .sets un target
                      .says Let's go down...
                      .says Now: state={=state=}, target={=target=}
            .response
                .weights un state
                .needs un target
                .does .sets target
                      .says Let's go up...
                      .says Now: state={=state=}, target={=target=}
.end



---------------------------------------

2016-04-30

Is there a more specific way to signify this? Do we want to key age of a topic on something other than its decayed
weight (like a timestamp or game cycle index of some sort)?

--------

Each responder has state. That state can be "meta-state", that is "state about state". So, for example, if Mary is
happy and Joe sees it, Joe can store state locally that Mary is happy. This is Joe's "model of reality", which is
based on observation. It is not peeking directly into Mary's "happy" state but is rather an inferred state set based
on what is suggested by Mary's responses. (That is one approach - is there a way to have things happen automatically?)

----------------------------------------

2016-04-29

Can we manipulate "events" instead of just topics? That is, something like
"Door opens"  (door:opens)
"Alice says <topic1 topic2>" (Alice:says:topic1, Alice:says:topic2)

This allows response to specific characters saying things as opposed to just topics in general.

Do we need to be able to parse to pick out pieces (like "Alice" or "Alice:says")?

How long would specific things remain in context?
- Suggested topics
- "Events"

--------

We want to be able to respond to topics differently depending on "age" (or, more generally, the current weight), where
as the weight decreases, different responses come into play.

Bob says, "Would you like a drink?"

Immediate response: "That would be great. Thanks!"
Slight delay: "By the way, I would definitely like a drink."
Longer delay: "You asked before about wanting a drink. I'd like to take you up on your offer."

We need to match based on topic weight. That can be done to some extent using .weights (assuming the decaying value is
available as a weight - add topics to some checks?). Assume the topic is "DRINK":

.response
    .weights DRINK
    .does .says "That would be great. Thanks!"

.response
    .weights DRINK equals 0.8
    .does .says "By the way, I would definitely like a drink."

.response
    .weights DRINK equals 0.6
    .does .says "You asked before about wanting a drink. I'd like to take you up on your offer."

DRINK = 1
    1.0
    0.8
    0.6
DRINK = 0.9
    0.9
    0.9
    0.7
DRINK = 0.8
    0.8
    1.0
    0.8
DRINK = 0.7
    0.7
    0.9
    0.9
DRINK = 0.6
    0.6
    0.8
    1.0
DRINK = 0.5
    0.5
    0.7
    0.9
DRINK = 0.3
    0.3
    0.5
    0.7

DRINK and DRINK equals 0.4


----------------------------------------

2016-04-27

Room/LOOK: You are in a large room.
Apple/LOOK: There is an apple on the table.
Elf/ACT: "Try it," the elf says. "Try to take the apple."

V
You are in a large room. There is an apple on the table.
"Try it," the elf says. "Try to take the apple."

Possible break strategy:
1) Break after each riff cycle.
2) Break after each action.
3) Don't break for responses to action calls.
4) Don't break for responses to normal calls.

Probably still won't work...

----------------------------------------

2016-04-24

.model actor
    .cluster persistent .weight 0.9
    .cluster transient .decaying 0.4 .suggestible
    .trait happy .decaying 0.3 .toward <expression>
.end

----------------------------------------

2016-04-16

Combining weights:

- When adding weight to cluster, take the max weight of new and any existing.
- When combining weights, adjust weight toward 2 (?).

current = current + (2-current)*(new/2)

This works well, as it doesn't matter which order you add the weights!

----------------------------------------

2016-04-13

.suggests -> .implies
.perceives

.model actor
    .cluster persistent .scaling 0.9
    .cluster transient .decaying 0.4
    .infers transient
    .trait happy .decaying 0.3 .toward <expression>
.end


----------------------------------------

2016-04-10

.model actor
    .cluster persistent .scaling 0.9
    .cluster transient .decaying 0.4
    .trait happy .decaying 0.3 .toward <expression>
.end

.model another actor .use actor

----------------------------------------

2016-04-09

.add <topics> .to <cluster> .for <responder>
.remove <topics> .from <cluster> .for <responder>

.adds <topics> [.to <responder>] [.in <long-term>] [.decaying [.toward target] [.stepping step]]
.removes <topics> [.from <long-term>]

----------------------------------------

2016-04-07

.adds <topics> [.to <long-term>] [.decaying [.toward target] [.stepping step]]
.removes <topics> [.from <long-term>]

.suggests topics

----------------------------------------

2016-04-05

.uses first
.uses all
.uses random
.uses best

Same for selects?

-----

Can we handle the case of multiple similar topics? Consider a case where people are discussing movies. A person may have
memories of various movies, but only one gets chosen at a time to be mentioned.

I've seen:
- Star Wars
- Close Encounters
- 2001
- Something's Gotta Give
- The Mummy
- Stargate

The topic would be "movie". There could be related topics like "science fiction" or "comedy". (topics = movies, comedy)
But what is the way to rank the movies in order to discuss one of them?

One criteria is how much the person liked the movie. Weightings?

Another might be how much the person thinks the movie would appeal to the people in the discussion.

Tom <==> comedies
movies comedies <==> Something's Gotta Give

So: movies + Tom => movies + comedy => Something's Gotta Give

-----
Internal responses, with topics cascading to topics.

----------------------------------------

2016-04-04

Each topic has:
    - keyword
    - weight
    - decay
    - decay target

Combining topics
    - Do we keep multiple influences? Or combine topics?

k: keyword, w: 100, d: 0.2, dt: 0   -> decays
k: keyword, w: 80, d: 0.0, dt: 0    -> doesn't

----------------------------------------

2016-04-02

merging weights:

100 90 80
    100 90 => 145
        145 80 => 185
80 90 100
    90 80 => 130
        130 100 => 180

80 100 90
    80 100 => 140
        140 90 => 185

50 100 10
    50 100 => 125
        125 10 => 130

10 100 50
    10 100 => 105
        105 50 => 130

10 50 100
    10 50 => 55
        55 100 => 127

Incoming: III
Long term: LLL
Short term: SSS

Given all three, how to combine? Which takes precedence?

- The final value should be no less than any of the input values. "max" satisfies that.

During response handling: merge topics with responder long and short term topics (or topics with "current topics")
During action handling: merge actor current topics


----------------------------------------

2016-04-01
Attribute paths.

Current:
    - absolute attribute
        open
        happy
        shared

    - relative to current responder
        :happy
        :health

    bare name (no leading colon) = absolute attribute
    colon-prefixed: relative to current responder

Proposed 1:

    - relative to current responder
        happy   ->      :responder:happy
        open    ->      :responder:open
        emotions:sad -> :responder:emotions:sad

    - absolute, fully specified

    :responder:attribute
        :king:name

    - relative, part of whole

        ::attribute   = attribute of top-level component (:: is empty version of :responder:)

    - absolute, partially specified (attribute of top-level object). Same as bare name if single level deep.

        ::name

Proposed 2:

    - relative to current responder
        happy               -> responder:happy
        open                -> responder:open
        shared              -> responder:shared
        :shared             -> responder:shared
        :emotions:sad       -> responder:emotions:sad
        :thoughts:goals:win -> responder:thoughts:goals:win

    - absolute
        responder:attribute

    - part of whole, parent component attribute
        ::attribute


----------------------------------------

Actions can be "introspective", modifying internal state based on internal state. This could be based on rules or direct internal "suggests".
This can give a character complex, constantly-changing internal state, based on *self feedback*.

"Multiple I's" all vying for attention?

Should topic and emotion decay be more built in? Set up rules to follow, and the engine does it?

Current::
Emotional state: variables with value -1 to 1, coming in as response weights.
Thoughts, ideas: topics with value 0 to 1 (?), coming in as initial response scores.
Facts: world state with whatever values, coming in as response needs.

Is there overlap? Combination? Can world state be a response weight? Can a topic be a need? Are they all the same thing, or are they inherently
different and should be kept that way?

----------------------------------------

.response
    .does
        .recalls .translating a .to b .and c .to d .and e .to
        .forwards .translating a .to b .and c .to d .and e .to
        .echoes .translating a .to b .and c .to d .and e .to
        .repeats .translating a .to b .and c .to d .and e .to

----------------------------------------

.responses door-proxy
.end

.component door-proxy .part-of door
.component door-proxy .of door

'door-proxy' uses 'door' as its responder. (impersonates?)

That may be sufficient, but do we want to be able to specify either "component" or "master" attributes?

----------------------------------------
Actions that default "say" (without an "into") should only allow the text on screen if the actor is also a current pov responder.
No screaming from the other end of the building.

----------------------------------------


Use for topics:

- short term topics
- long term topics
- goals
- memories
- instinct, built-in behaviors for survival, hunger, etc.
- moods
- fears, phobias
- thoughts

memories can be both topics and state (generally)

sleepy => return to room

door shutting -> event = topic
door being in the shut state -> state

----------------------------------------
World:
	- rif
	- states
	- parents/children
	- POV
	- actor data model
		- transient topics
		- persistent topics

Topics:
	- keyword
	- weight
	- decay rate (?) [ could make "transient" vs "persistent" more continuous ]
	- new

----------------------------------------
.# Set boolean true
.sets someflag

.# Set boolean false
.sets not someflag
.sets !someflag

.# needs true
.needs someflag

.# needs false
.needs !someflag
.needs not someflag

.# needs multiple flags
.needs someflag someotherflag
.needs someflag and someotherflag
.needs someflag !someotherflag
.needs someflag and not someotherflag
.needs someflag or someotherflag

.# misc needs

.needs someflag or (thisflag and not thatflag)
.needs x > 1 and y < 100

and:
    x > 1
    y < 100

    not x and y

    x and y not

.sets not open
.sets happy
.sets not happy
.sets very happy  => .sets happy=very
.sets somewhat happy => sets happy=somewhat
.sets more happy
.sets less happy

.set break .to .text <span style='font-size:6pt;'>&nbsp;</span>
.set break=<span style='font-size:6pt;'>&nbsp;</span>
.set break .to <span style='font-size:6pt;'>&nbsp;</span>

.set y .to x+1
.set y=x+1


=================================================================================

mining bot

inputs		door_open player:parent saw_player
outputs 	GREET_PLAYER PLEAD_WITH_PLAYER FOLLOW_PLAYER

not door open, player:parent="alcove"  -> nothing
door_open, player:parent="alcove, not saw player -> GREET_PLAYER

=================================================================================

extremely   -1.4

very        -1.2

unhappy     -1

mostly      -0.8

fairly      -0.6

somewhat    -0.4

slightly    -0.2

--------    0       not (happy or unhappy)

slightly    0.2

somewhat    0.4

fairly      0.6

mostly      0.8

happy       1

very        1.2

extremely   1.4

=================================================================================

trigger
stimulus
incentive
motivation
motive
impetus
impulse
fillip
catalyst
cause

long term topics
permanent topics
persisting
motivations
goals

short term topics
transient topics

.adds permanent

motivation 
inspiration
reason
idea
concept
inclination
knowledge

inform
convey
notify
transmit
dispatch
conduct
announce
disclose
declare
impart
proclaim

dissuade
discourage

forget
dismiss

.favors happy

.prefers happy

.biases happy

.affinity happy

.wants happy

.weights happy and content

.weighs happy

.scales sad and wet


.add .transient 
.add .permanent

.add-permanent
.adds-permanent-topic  foo .to responder
.add-transient-topic 

.adds .permanent foo bar baz .to responder
.removes .permanent bix .from responder

.adds .topic foo bar baz .to responder
.removes .topic bix .from responder

.add .topic foo=50 .to responder
.add foo=50 .to responder
 
.suggests ceiling
.suggests walls .to blah

.remember foo bar 
.remembers foo bar
.remembers bix .by responder

.forgets bar
.forgets bar .by responder

.says Press any key to continue .into #some_div .as prompt_class

# phone call
.connects hotel room .to mary

.set traffic light:state .to green
.actions traffic light
	.response
		.does 3
			.says The traffic light turns yellow.
			.sets :state .to yellow
		.does 6
			.says The traffic light turns red.
			.sets :state .to red
		.does 12
			.says The traffic light turns green.
			.sets :state .to green
			.resets
.end

===========================================================
Stimulus-response S-curve

End-weighted Addition

NewValue = CurrentValue + (MaxValue - CurrentValue)*Increment/(MaxValue-MinValue)

==> NewValue = CurrentValue + (1-CurrentValue)*Increment

End-weighted Subtraction

NewValue = CurrentValue - (MaxValue - CurrentValue)*Decrement/(MaxValue-MinValue)

==> NewValue = CurrentValue - (1-CurrentValue)*Decrement
